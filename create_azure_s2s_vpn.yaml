#create_azure_vm.yaml
---
- hosts: localhost
  connection: local

  vars_prompt:
    - name: password
      prompt: "Enter local administrator password"

  tasks:
    - name: Create resource group
      azure_rm_resourcegroup:
        name: "{{ rg_name }}"
        location: "{{ cld_region }} "

    - name: Create virtual network
      azure_rm_virtualnetwork:
        resource_group: "{{ rg_name }}"
        name: "{{ vn_name }}"
        address_prefixes: "{{ vn_addr_spc }}"

    # Create interesting traffic subnet
    - name: Add cloud subnets
      azure_rm_subnet:
        resource_group: "{{ rg_name }}"
        name: "{{ item.key }}"
        address_prefix: "{{ item.value }}"
        virtual_network: "{{ vn_name }}"
      loop: "{{cld_subnets|dict2items}}"

    # Create gateway subnet
    - name: Add gateway subnet
      azure_rm_subnet:
        resource_group: "{{ rg_name }}"
        name: "{{ gw_subnet_name }}"
        address_prefix: "{{ gw_subnet_prfx }}"
        virtual_network: "{{ vn_name }}"

    - name: Create public IP address
      azure_rm_publicipaddress:
        resource_group: "{{ rg_name }}"
        allocation_method: Dynamic
        name: "{{ public_ip_name }}"
      register: output_ip_address

    - name: Output public IP
      debug:
        msg: "The public IP is {{ output_ip_address.state.ip_address }}"

    # Login to AZ CLI to create local network gateway
    - set_fact:
        az_creds: "{{ lookup('file', '~/.azure/credentials') }}"
      check_mode: no
    - name: Azure CLI Login
      command: "{{ az_creds | az_login }}"

    - name: CLD >> Checking if Virtual network gateway exists
        shell: az network vnet-gateway list -g {{ rg_name }}
        register: network_gw
    - set_fact:
        network_gw_exists: "{{ network_gw.stdout|check_az_show(public_ip_name) }}"

    - name: Create virtual network gateway
      command: >
        az network vnet-gateway create
        --name {{ cld_gateway }}
        --resource-group {{ rg_name }}
        --public-ip-addresses {{ public_ip_name }}
        --vnet {{ vn_name }}
        --gateway-type Vpn
        --sku VpnGw2
        --vpn-type RouteBased
        --vpn-gateway-generation Generation2
      when: not network_gw_exists|bool

    - name: CLD >> Checking if local network gateway exists
        shell: az network local-gateway list -g {{ rg_name }}
        register: local_gw
    - set_fact:
        local_gw_exists: "{{ local_gw.stdout|check_az_show(rmte_gateway) }}"

    - name: Create local network gateway
      command: >
        az network local-gateway create
        --name {{ rmte_gateway }}
        --resource-group {{ rg_name }}
        --gateway-ip-address {{ rmte_public_ip }}
        --local-address-prefixes {{ rmte_subnets|rmte_prfxs }}
      when: not local_gw_exists|bool

    # check if the vpn-conn exists
    - name: CLD >> Checking if VPN connection exists
      shell: az network vpn-connection list -g {{ rg_name }}
      register: vpn_conns
    - set_fact:
        vpn_conn_exists: "{{ vpn_conns.stdout|check_az_show(vpn_connection) }}"

    - name: Create VPN connection
      command: >
        az network vpn-connection create
        --name {{ vpn_connection }}
        --resource-group {{ rg_name }}
        --vnet-gateway1 {{ cld_gateway }}
        --shared-key {{ psk }}
        --local-gateway2 {{ rmte_gateway }}
      when: not vpn_conn_exists|bool

    - name: Create VPN connection IPSEC policy
      command: >
        az network vpn-connection ipsec-policy add
        --connection-name {{ vpn_connection }}
        --resource-group {{ rg_name }}
        --dh-group {{ dh }}
        --ike-encryption {{ p1_encr | replace("-", "") | replace("3des", "DES3") | upper }}
        --ike-integrity {{ p1_hash | upper }}
        --ipsec-encryption {{ p2_encr | replace("-", "") | replace("3des", "DES3") | upper }}
        --ipsec-integrity {{ p2_hash | replace("-", "") | upper }}
        --pfs-group {{ pfs | replace("group", "PFS") }}
        --sa-lifetime {{ sa_life }}
        --sa-max-size {{ sa_size }}
      when: not vpn_conn_exists|bool